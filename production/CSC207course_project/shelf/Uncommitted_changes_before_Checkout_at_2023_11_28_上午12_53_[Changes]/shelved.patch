Index: src/view/ViewManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;public class ViewManager {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/view/ViewManager.java b/src/view/ViewManager.java
--- a/src/view/ViewManager.java	
+++ b/src/view/ViewManager.java	
@@ -1,2 +1,3 @@
-package view;public class ViewManager {
+package view;
+public class ViewManager {
 }
Index: src/entities/postEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package entities;\n\nimport java.util.ArrayList;\n\n    public class postEntity {\n    private Object postInfo;\n    private ArrayList<String> postComment;\n    private Integer postLiked;\n    private static Integer countpostID = 0;\n    private Integer postID;\n    public postEntity(Object postInfo){\n        this.postInfo = postInfo;\n        postLiked = 0;\n        postComment = new ArrayList<String>();\n        countpostID ++;\n        postID = countpostID;\n    }\n    public void updatePostComment(String newComment){\n            postComment.add(newComment);\n        }\n    public void updatedPostLiked(){\n            postLiked += 1;\n        }\n    public Integer getPostLiked() {\n            return postLiked;\n        }\n    public Object getPostInfo() {\n            return postInfo;\n        }\n    public ArrayList<String> getPostComment() {\n            return postComment;\n        }\n    public Integer getId(){\n        return this.postID;\n    }\n    }\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/entities/postEntity.java b/src/entities/postEntity.java
--- a/src/entities/postEntity.java	
+++ b/src/entities/postEntity.java	
@@ -18,8 +18,8 @@
     public void updatePostComment(String newComment){
             postComment.add(newComment);
         }
-    public void updatedPostLiked(){
-            postLiked += 1;
+    public void setPostLiked(Integer postLiked){
+            this.postLiked = postLiked;
         }
     public Integer getPostLiked() {
             return postLiked;
Index: src/app/MainTestForListLikedView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app;\n\nimport interface_adapter.ViewManagerModel;\nimport interface_adapter.back.BackController;\nimport interface_adapter.list_liked_post.ListLikedPostController;\nimport interface_adapter.list_liked_post.ListLikedPostPresenter;\nimport interface_adapter.list_liked_post.ListLikedPostState;\nimport interface_adapter.list_liked_post.ListLikedPostViewModel;\nimport use_case.list_liked_post.ListLikedPostInputBoundary;\nimport use_case.list_liked_post.ListLikedPostInteractor;\nimport use_case.list_liked_post.ListLikedPostOutputData;\nimport view.ListLikedPostView;\nimport view.ViewManager;\nimport entities.postEntity;\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.ArrayList;\n\npublic class MainTestForListLikedView {\n    public static void main(String[] args){\n        JFrame application = new JFrame(\"test LikedPost\");\n        application.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n        CardLayout cardLayout = new CardLayout();\n\n        JPanel views = new JPanel(cardLayout);\n        application.add(views);\n        ViewManagerModel viewManagerModel = new ViewManagerModel();\n        new ViewManager(views, cardLayout, viewManagerModel);\n        ListLikedPostViewModel listLikedPostViewModel = new ListLikedPostViewModel();\n        ListLikedPostPresenter listLikedPostPresenter = new ListLikedPostPresenter(listLikedPostViewModel, viewManagerModel);\n        ArrayList<postEntity> listOfpostEntites = new ArrayList<postEntity>();\n        for (int i = 0; i <= 100; i++ ){\n            postEntity onePost = new postEntity(\"this is a post for test\" + String.valueOf(i));\n            listOfpostEntites.add(onePost);\n        }\n        for (int i = 0; i <= 100; i++){\n            postEntity onePost = new postEntity(\"this is a extra l\" + \"o\".repeat(500)+ \"ng post\");\n            listOfpostEntites.add(onePost);\n        }\n        ListLikedPostState listLikedPostState = new ListLikedPostState();\n        ListLikedPostOutputData listLikedPostOutputData =  new ListLikedPostOutputData(listOfpostEntites);\n        listLikedPostPresenter.prepareSuccessView(listLikedPostOutputData);\n        ListLikedPostInputBoundary fakeinteractor = new ListLikedPostInteractor();\n        ListLikedPostController fakecontroller = new ListLikedPostController(fakeinteractor);\n        BackController fakebackcontroller = new BackController();\n        ListLikedPostView listLikedPostView = new ListLikedPostView(listLikedPostViewModel, fakecontroller,fakebackcontroller);\n\n        views.add(listLikedPostView, listLikedPostView.viewName);\n        viewManagerModel.setActiveView(listLikedPostView.viewName);\n        viewManagerModel.firePropertyChanged();\n        application.pack();\n        application.setVisible(true);\n\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/MainTestForListLikedView.java b/src/app/MainTestForListLikedView.java
--- a/src/app/MainTestForListLikedView.java	
+++ b/src/app/MainTestForListLikedView.java	
@@ -25,7 +25,7 @@
         JPanel views = new JPanel(cardLayout);
         application.add(views);
         ViewManagerModel viewManagerModel = new ViewManagerModel();
-        new ViewManager(views, cardLayout, viewManagerModel);
+        new ViewManager();
         ListLikedPostViewModel listLikedPostViewModel = new ListLikedPostViewModel();
         ListLikedPostPresenter listLikedPostPresenter = new ListLikedPostPresenter(listLikedPostViewModel, viewManagerModel);
         ArrayList<postEntity> listOfpostEntites = new ArrayList<postEntity>();
Index: CSC207course_project.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"JAVA_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\n    <exclude-output />\n    <content url=\"file://$MODULE_DIR$\">\n      <sourceFolder url=\"file://$MODULE_DIR$/.idea\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/src\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/test\" isTestSource=\"true\" />\n    </content>\n    <orderEntry type=\"inheritedJdk\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CSC207course_project.iml b/CSC207course_project.iml
--- a/CSC207course_project.iml	
+++ b/CSC207course_project.iml	
@@ -3,11 +3,36 @@
   <component name="NewModuleRootManager" inherit-compiler-output="true">
     <exclude-output />
     <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/.idea" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/test" isTestSource="true" />
     </content>
     <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="module-library" scope="TEST">
+      <library name="JUnit4">
+        <CLASSES>
+          <root url="jar://$MAVEN_REPOSITORY$/junit/junit/4.13.1/junit-4.13.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library" scope="TEST">
+      <library name="JUnit5.8.1">
+        <CLASSES>
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter/5.8.1/junit-jupiter-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-api/5.8.1/junit-jupiter-api-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-commons/1.8.1/junit-platform-commons-1.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-params/5.8.1/junit-jupiter-params-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-engine/5.8.1/junit-jupiter-engine-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-engine/1.8.1/junit-platform-engine-1.8.1.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
   </component>
 </module>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><project version=\"4\">\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_20\" project-jdk-name=\"corretto-20\" project-jdk-type=\"JavaSDK\" />\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	
+++ b/.idea/misc.xml	
@@ -1,3 +1,5 @@
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_20" project-jdk-name="corretto-20" project-jdk-type="JavaSDK" />
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_20" project-jdk-name="corretto-20" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/../xuanboha" />
+  </component>
 </project>
\ No newline at end of file
Index: src/data_access/InMemoryDataAccessObject.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package data_access;\n\nimport entities.postEntity;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class InMemoryDataAccessObject implements postDAO{\n    private ArrayList<postEntity> posts;\n    private InMemoryDataAccessObject(){\n        posts = new ArrayList<postEntity>();\n    }\n    @Override\n    public postEntity getMostRecentPost() {\n        return posts.get(posts.size() -1 );\n    }\n\n    @Override\n    public void savePost(postEntity post) {\n        posts.add(post);\n    }\n\n    @Override\n    public void cleanAllPost() {\n        posts.clear();\n    }\n\n    @Override\n    public postEntity getMostPopularPost() {\n        int i = 0;\n        postEntity mostPopular = posts.get(0);\n        while (i < posts.size()){\n            if (posts.get(i).getPostLiked() > mostPopular.getPostLiked()){\n                mostPopular = posts.get(i);\n            }\n        }\n        return mostPopular;\n    }\n\n    @Override\n    public postEntity getPost(Integer id) {\n        return null;\n    }\n\n    @Override\n    public postEntity getlatestPost(List<postEntity> posts) {\n        Object postEntity;\n        return null;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/data_access/InMemoryDataAccessObject.java b/src/data_access/InMemoryDataAccessObject.java
--- a/src/data_access/InMemoryDataAccessObject.java	
+++ b/src/data_access/InMemoryDataAccessObject.java	
@@ -42,6 +42,11 @@
         return null;
     }
 
+    @Override
+    public List<postEntity> getLatestPosts() {
+        return null;
+    }
+
     @Override
     public postEntity getlatestPost(List<postEntity> posts) {
         Object postEntity;
Index: src/view/postView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;public class postView {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/view/postView.java b/src/view/postView.java
--- a/src/view/postView.java	
+++ b/src/view/postView.java	
@@ -1,2 +1,3 @@
-package view;public class postView {
+package view;
+public class postView {
 }
Index: src/interface_adapter/post_plaza/PostPlazaState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package interface_adapter.post_plaza;public class PostPlazaState {\n}\n
===================================================================
diff --git a/src/interface_adapter/post_plaza/PostPlazaState.java b/src/interface_adapter/post_plaza/PostPlazaState.java
--- a/src/interface_adapter/post_plaza/PostPlazaState.java	
+++ b/src/interface_adapter/post_plaza/PostPlazaState.java	
@@ -1,2 +1,10 @@
-package interface_adapter.post_plaza;public class PostPlazaState {
+package interface_adapter.post_plaza;
+
+import entities.postEntity;
+
+import java.util.HashMap;
+
+public class PostPlazaState {
+    public HashMap<Integer, postEntity> postMap;
+
 }
Index: src/interface_adapter/post_plaza/PostPlazaViewModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package interface_adapter.post_plaza;\n\npublic class PostPlazaViewModel {\n}\n
===================================================================
diff --git a/src/interface_adapter/post_plaza/PostPlazaViewModel.java b/src/interface_adapter/post_plaza/PostPlazaViewModel.java
--- a/src/interface_adapter/post_plaza/PostPlazaViewModel.java	
+++ b/src/interface_adapter/post_plaza/PostPlazaViewModel.java	
@@ -1,4 +1,7 @@
 package interface_adapter.post_plaza;
 
 public class PostPlazaViewModel {
+    public static final String POST_LABEL = "New Post";
+    public static final String PULL_LABEL = "refresh post plaza";
+    public static final String CHECK_LIKED_POST_LABEL = "check liked post";
 }
